
//! Autogenerated weights for `pallet_module_payments`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 50.0.0
//! DATE: 2025-10-08, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `z90`, CPU: `12th Gen Intel(R) Core(TM) i5-12600KF`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// ./target/release/wbuild/modnet-runtime/modnet_runtime.wasm
// --pallet
// pallet_module_payments
// --extrinsic
// 
// --template
// .maintain/frame-weight-template.hbs
// --output
// pallets/module-payments/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_module_payments`.
pub trait WeightInfo {
	fn set_authorized_module() -> Weight;
	fn set_module_weights() -> Weight;
	fn report_payment() -> Weight;
}

/// Weights for `pallet_module_payments` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Modules::Modules` (r:1 w:0)
	/// Proof: `Modules::Modules` (`max_values`: None, `max_size`: Some(360), added: 2835, mode: `MaxEncodedLen`)
	/// Storage: `ModulePayments::AuthorizedModule` (r:1 w:1)
	/// Proof: `ModulePayments::AuthorizedModule` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	fn set_authorized_module() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `74`
		//  Estimated: `3825`
		// Minimum execution time: 8_785_000 picoseconds.
		Weight::from_parts(9_075_000, 3825)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ModulePayments::AuthorizedModule` (r:1 w:0)
	/// Proof: `ModulePayments::AuthorizedModule` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Modules::Modules` (r:1 w:0)
	/// Proof: `Modules::Modules` (`max_values`: None, `max_size`: Some(360), added: 2835, mode: `MaxEncodedLen`)
	/// Storage: `ModulePayments::ModuleUsageWeights` (r:1 w:2)
	/// Proof: `ModulePayments::ModuleUsageWeights` (`max_values`: None, `max_size`: Some(10), added: 2485, mode: `MaxEncodedLen`)
	fn set_module_weights() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `239`
		//  Estimated: `3825`
		// Minimum execution time: 13_785_000 picoseconds.
		Weight::from_parts(14_546_000, 3825)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `ModulePayments::AuthorizedModule` (r:1 w:0)
	/// Proof: `ModulePayments::AuthorizedModule` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Modules::Modules` (r:2 w:0)
	/// Proof: `Modules::Modules` (`max_values`: None, `max_size`: Some(360), added: 2835, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:3 w:3)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `ModulePayments::PaymentPoolAddress` (r:1 w:0)
	/// Proof: `ModulePayments::PaymentPoolAddress` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `ModulePayments::ModulePaymentFee` (r:1 w:0)
	/// Proof: `ModulePayments::ModulePaymentFee` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn report_payment() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `468`
		//  Estimated: `8799`
		// Minimum execution time: 73_601_000 picoseconds.
		Weight::from_parts(74_848_000, 8799)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Modules::Modules` (r:1 w:0)
	/// Proof: `Modules::Modules` (`max_values`: None, `max_size`: Some(360), added: 2835, mode: `MaxEncodedLen`)
	/// Storage: `ModulePayments::AuthorizedModule` (r:1 w:1)
	/// Proof: `ModulePayments::AuthorizedModule` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	fn set_authorized_module() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `74`
		//  Estimated: `3825`
		// Minimum execution time: 8_785_000 picoseconds.
		Weight::from_parts(9_075_000, 3825)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `ModulePayments::AuthorizedModule` (r:1 w:0)
	/// Proof: `ModulePayments::AuthorizedModule` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Modules::Modules` (r:1 w:0)
	/// Proof: `Modules::Modules` (`max_values`: None, `max_size`: Some(360), added: 2835, mode: `MaxEncodedLen`)
	/// Storage: `ModulePayments::ModuleUsageWeights` (r:1 w:2)
	/// Proof: `ModulePayments::ModuleUsageWeights` (`max_values`: None, `max_size`: Some(10), added: 2485, mode: `MaxEncodedLen`)
	fn set_module_weights() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `239`
		//  Estimated: `3825`
		// Minimum execution time: 13_785_000 picoseconds.
		Weight::from_parts(14_546_000, 3825)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `ModulePayments::AuthorizedModule` (r:1 w:0)
	/// Proof: `ModulePayments::AuthorizedModule` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Modules::Modules` (r:2 w:0)
	/// Proof: `Modules::Modules` (`max_values`: None, `max_size`: Some(360), added: 2835, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:3 w:3)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `ModulePayments::PaymentPoolAddress` (r:1 w:0)
	/// Proof: `ModulePayments::PaymentPoolAddress` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `ModulePayments::ModulePaymentFee` (r:1 w:0)
	/// Proof: `ModulePayments::ModulePaymentFee` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn report_payment() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `468`
		//  Estimated: `8799`
		// Minimum execution time: 73_601_000 picoseconds.
		Weight::from_parts(74_848_000, 8799)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
}
