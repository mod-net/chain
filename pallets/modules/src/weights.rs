
//! Autogenerated weights for `pallet_modules`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 50.0.0
//! DATE: 2025-09-30, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `z90`, CPU: `12th Gen Intel(R) Core(TM) i5-12600KF`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// ./target/release/wbuild/modnet-runtime/modnet_runtime.wasm
// --pallet
// pallet_modules
// --extrinsic
// 
// --template
// .maintain/frame-weight-template.hbs
// --output
// pallets/modules/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_modules`.
pub trait WeightInfo {
	fn register_module() -> Weight;
	fn update_module() -> Weight;
	fn remove_module() -> Weight;
}

/// Weights for `pallet_modules` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Modules::Modules` (r:1 w:1)
	/// Proof: `Modules::Modules` (`max_values`: None, `max_size`: Some(359), added: 2834, mode: `MaxEncodedLen`)
	/// Storage: `Modules::ModuleCollateral` (r:1 w:0)
	/// Proof: `Modules::ModuleCollateral` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Modules::NextModule` (r:1 w:1)
	/// Proof: `Modules::NextModule` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Modules::MaxModuleTake` (r:1 w:0)
	/// Proof: `Modules::MaxModuleTake` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn register_module() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `3824`
		// Minimum execution time: 23_569_000 picoseconds.
		Weight::from_parts(24_281_000, 3824)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Modules::Modules` (r:1 w:1)
	/// Proof: `Modules::Modules` (`max_values`: None, `max_size`: Some(359), added: 2834, mode: `MaxEncodedLen`)
	/// Storage: `Modules::MaxModuleTake` (r:1 w:0)
	/// Proof: `Modules::MaxModuleTake` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn update_module() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `154`
		//  Estimated: `3824`
		// Minimum execution time: 11_009_000 picoseconds.
		Weight::from_parts(11_606_000, 3824)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Modules::Modules` (r:1 w:1)
	/// Proof: `Modules::Modules` (`max_values`: None, `max_size`: Some(359), added: 2834, mode: `MaxEncodedLen`)
	fn remove_module() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `154`
		//  Estimated: `3824`
		// Minimum execution time: 19_814_000 picoseconds.
		Weight::from_parts(20_289_000, 3824)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Modules::Modules` (r:1 w:1)
	/// Proof: `Modules::Modules` (`max_values`: None, `max_size`: Some(359), added: 2834, mode: `MaxEncodedLen`)
	/// Storage: `Modules::ModuleCollateral` (r:1 w:0)
	/// Proof: `Modules::ModuleCollateral` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Modules::NextModule` (r:1 w:1)
	/// Proof: `Modules::NextModule` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Modules::MaxModuleTake` (r:1 w:0)
	/// Proof: `Modules::MaxModuleTake` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn register_module() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `3824`
		// Minimum execution time: 23_569_000 picoseconds.
		Weight::from_parts(24_281_000, 3824)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Modules::Modules` (r:1 w:1)
	/// Proof: `Modules::Modules` (`max_values`: None, `max_size`: Some(359), added: 2834, mode: `MaxEncodedLen`)
	/// Storage: `Modules::MaxModuleTake` (r:1 w:0)
	/// Proof: `Modules::MaxModuleTake` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn update_module() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `154`
		//  Estimated: `3824`
		// Minimum execution time: 11_009_000 picoseconds.
		Weight::from_parts(11_606_000, 3824)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Modules::Modules` (r:1 w:1)
	/// Proof: `Modules::Modules` (`max_values`: None, `max_size`: Some(359), added: 2834, mode: `MaxEncodedLen`)
	fn remove_module() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `154`
		//  Estimated: `3824`
		// Minimum execution time: 19_814_000 picoseconds.
		Weight::from_parts(20_289_000, 3824)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
